<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Will</title><link>http://willerhe.github.io/</link><description>Recent content on Will</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 02 Jun 2021 13:31:54 +0800</lastBuildDate><atom:link href="http://willerhe.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Mysql JSON</title><link>http://willerhe.github.io/posts/note/mysql/</link><pubDate>Wed, 02 Jun 2021 13:31:54 +0800</pubDate><guid>http://willerhe.github.io/posts/note/mysql/</guid><description>&lt;h4 id="mysql-json相关操作">Mysql Json相关操作&lt;/h4>
&lt;p>&lt;em>&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/json.html" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/em>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>合并两个json数组(不去重)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>select JSON_MERGE_PRESERVE('[&amp;quot;tag1&amp;quot;]','[&amp;quot;tag1&amp;quot;,&amp;quot;tag2&amp;quot;,&amp;quot;tag3&amp;quot;]');&lt;/code>&lt;/p>
&lt;p>结果：&lt;code>[&amp;quot;tag1&amp;quot;, &amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;, &amp;quot;tag3&amp;quot;]&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>合并两个json数组(不去重)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>select JSON_MERGE_PATCH('[&amp;quot;tag1&amp;quot;]','[&amp;quot;tag1&amp;quot;,&amp;quot;tag2&amp;quot;,&amp;quot;tag3&amp;quot;]');&lt;/code>&lt;/p>
&lt;p>结果：&lt;code>[&amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;, &amp;quot;tag3&amp;quot;]&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>十分钟使用Github Actions自动发布Hugo网站</title><link>http://willerhe.github.io/posts/tutorial/use-github-actions/</link><pubDate>Sat, 29 May 2021 13:31:54 +0800</pubDate><guid>http://willerhe.github.io/posts/tutorial/use-github-actions/</guid><description>&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>Github Actions是GitHub 于 2018 年 10 月推出的一个 CI\CD 服务。CI\CD 其实说的是三件事情：「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」、「持续部署（Continuous Deployment）」。
有了 GitHub Action 以后， GitHub 除了能够存储代码，能做的事情就更多了，比如我在 master 分支上提交了一段代码， GitHub Action 可以自动的帮我部署到我自己的服务器上去，或者它还可以帮我把代码打成镜像，将镜像自动提交到镜像仓库里。
虽然这些事情自己手动也能做，但是懒惰是程序员的第一生产力嘛。&lt;/p>
&lt;h3 id="环境要求">环境要求&lt;/h3>
&lt;ol>
&lt;li>安装git&lt;/li>
&lt;li>拥有一个github账号&lt;/li>
&lt;li>了解Github Pages托管静态网站方式 &lt;a class="link" href="../use-github-pages" >Check&amp;gt;&amp;gt;&amp;gt;&lt;/a>&lt;/li>
&lt;li>TODO：自动同步到Gitee镜像&lt;/li>
&lt;/ol>
&lt;h3 id="步骤">步骤&lt;/h3>
&lt;ol>
&lt;li>了解github actions的工作流程、了解docker镜像基本使用方式。&lt;/li>
&lt;li>找到需要自动构建的Hugo静态网站，并确保在本地能够构建成功。&lt;/li>
&lt;li>开始使用github actions 服务，github actions会寻找项目根目录下&lt;code>.github/workflows/*&lt;/code>下面所有的文件作为工作流描述文件，&lt;a class="link" href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions" target="_blank" rel="noopener"
>了解详情&amp;gt;&amp;gt;&amp;gt;&lt;/a>。
这里我们不需要自己编写，直接使用第三方镜像，在github的&lt;a class="link" href="https://github.com/marketplace?type=actions&amp;amp;query=hugo&amp;#43;" target="_blank" rel="noopener"
>应用市场&lt;/a> 中查找适合自己Hugo项目的actions镜像，这里用的是&lt;a class="link" href="https://github.com/marketplace/actions/hugo-setup" target="_blank" rel="noopener"
>hugo-setup&lt;/a>。
把示例项目中&lt;code>.github/workflows/&lt;/code>下面的配置文件拷贝到自己的项目中，如果同样使用的是hugo-setup，注意&lt;code> publish_dir: ./public&lt;/code>配置在&lt;code>v3.8.0&lt;/code>版本是不起作用的，直接默认就好，不用改。
如果报项目仓库的访问权限错误，去给自己的项目加上访问秘钥，&lt;a class="link" href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token" target="_blank" rel="noopener"
>&amp;gt;&amp;gt;&amp;gt;&lt;/a>。&lt;/li>
&lt;li>修改代码推送到main分支，在github actions栏目中能够看到构建过程。构建成功后，修改git pages设置，把网站指向镜像自动部署的分支，要保证github pages能够找到index.html文件。&lt;/li>
&lt;/ol>
&lt;p>&lt;em>&amp;mdash;&amp;mdash; 待完善&lt;/em>&lt;/p></description></item><item><title>十分钟使用Github Pages和Hugo搭建个人网站</title><link>http://willerhe.github.io/posts/tutorial/use-github-pages/</link><pubDate>Sat, 29 May 2021 13:31:54 +0800</pubDate><guid>http://willerhe.github.io/posts/tutorial/use-github-pages/</guid><description>&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>Github Pages是Github官方的静态站点托管系统，能够依赖Git的代码管理能力和Github的仓库轻松维护个人网站。&lt;/p>
&lt;p>Hugo是Go编写的静态网站生成器，速度快，易用，可配置。
使用Github Pages + Hugo构建个人网站的优点：&lt;/p>
&lt;ul>
&lt;li>无须额外服务器，无须额外服务器，专注创作&lt;/li>
&lt;li>支持Markdown&lt;/li>
&lt;li>支持查看文件的历史改动&lt;/li>
&lt;li>Hugo拥有海量皮肤，能够自定义&lt;/li>
&lt;/ul>
&lt;h3 id="环境要求">环境要求&lt;/h3>
&lt;ol>
&lt;li>安装git&lt;/li>
&lt;li>安装golang、hugo&lt;/li>
&lt;li>拥有一个github账号&lt;/li>
&lt;/ol>
&lt;h3 id="步骤">步骤&lt;/h3>
&lt;ol>
&lt;li>为站点创建仓库，仓库名称必须为&lt;code>&amp;lt;user&amp;gt;.github.io&lt;/code>或者&lt;code>&amp;lt;organization&amp;gt;.github.io&lt;/code>，必须为&lt;code>Public&lt;/code>仓库，必须有&lt;code>README.md&lt;/code>文件，必须有&lt;code>index.html&lt;/code>作为网站入口。&lt;a class="link" href="https://docs.github.com/cn/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-a-repository-for-your-site" target="_blank" rel="noopener"
>More&amp;gt;&amp;gt;&amp;gt;&lt;/a>&lt;/li>
&lt;li>访问网站&lt;code>https://&amp;lt;user&amp;gt;.github.io&lt;/code>或者&lt;code>&amp;lt;https://&amp;lt;organization&amp;gt;.github.io&lt;/code>。看到&lt;code>index.html&lt;/code>中的内容说明成功。&lt;/li>
&lt;li>了解静态网站生成器，github官方是&lt;a class="link" href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll" target="_blank" rel="noopener"
>Jekyll&lt;/a>，因为之前用过Hugo，体验非常好，所以改用Hugo。还有更多类似的 &lt;a class="link" href="https://linux.cn/article-12671-1.html" target="_blank" rel="noopener"
>类似工具&lt;/a>，
但是最终目的是相同的，要把我们的文档内容转为静态网页文件，关于Hugo的安装和使用查看见&lt;a class="link" href="https://gohugo.io/" target="_blank" rel="noopener"
>详情&lt;/a>。&lt;/li>
&lt;li>一切顺利的话，一个好看的网站就诞生了。&lt;/li>
&lt;/ol>
&lt;p>&lt;em>&amp;mdash;&amp;mdash; 待完善&lt;/em>&lt;/p></description></item></channel></rss>