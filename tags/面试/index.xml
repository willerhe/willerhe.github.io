<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>面试 on Will</title><link>http://willerhe.github.io/tags/%E9%9D%A2%E8%AF%95/</link><description>Recent content in 面试 on Will</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 31 May 2021 13:31:54 +0800</lastBuildDate><atom:link href="http://willerhe.github.io/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>面试常问问题汇总</title><link>http://willerhe.github.io/posts/resume/untitled/</link><pubDate>Mon, 31 May 2021 13:31:54 +0800</pubDate><guid>http://willerhe.github.io/posts/resume/untitled/</guid><description>Spring事务的默认隔离级别? 默认隔离级别：REPEATED_READ
READ_UNCOMMITED 读未提交 高并发场景下，其他线程可以读到未提交的事务的数据 ，可能出现脏读、幻读或不可重复读 READ_COMMITED 读已提交 只能读到已提交的数据 REPEATED_READ 重复读 能读到当前事务中的未提交的数据和其他事务已经提交的数据 SERIALIZABLE 串行化 事务挨个执行，不存在脏读、幻读、不可重复读问题，但是影响性能 常见的设计模式？ 单例模式 装饰器模式 一个统一的抽象父类，不同的子类有自己不同的装饰属性和装饰方法 工厂模式 流程一致，但每个子类的单独流程处理不同 建造者模式 SQL build就是非常常见的一种建造者模式 观察者模式 即发布订阅模式 常用的软件工程图。时序图、状态图、ER图、流程图 Mysql常用的方法 concat、ifnull、upper、substr、trim、rpad、lpad、replace、round、now、currenttime、UNIX_TIMESTAMP、FROM_UNIXTIMEMysql分页的实现 limit offset 传统实现 通过有序id去实现 覆盖索引，利用索引优势select * from (select id from job limit 1000000,100) a left join job b on a.id = b.id; 如何处理超卖订单？ 避免超卖订单的产生：分布式锁（redison）底层是用Lua脚本实现的redis原子执行，乐观锁、自旋锁。
还有可能出现的问题：redis主从切换导致锁丢失
mq 的典型应用场景，项目中什么地方用到过，怎么实现的？ 目的：削峰、解耦
高可用：rabbitmq的镜像集群的部署模式
&amp;hellip;
什么场景下会使用多线程 一个业务有很多处理流程并且处理流程之间不会相互影响 定时任务、批处理任务 需要知道一个任务的执行情况，比如redission中自动续期功能的实现就是一个新的线程不断查看锁的引用状态 Redis的几种基本数据类型 String 键值对Hash 列表list 集合set 有序集合zset Mybatis怎么用WhereIn 不能够直接写会有sql注入问题，用Mybatis的foreach方法对数组进行处理。</description></item></channel></rss>